// Generated by CoffeeScript 1.3.1
(function() {
  var Gurl, async, fs, urlparse;

  fs = require('fs');

  urlparse = require('urlparse');

  async = require('async');

  Gurl = (function() {

    Gurl.name = 'Gurl';

    function Gurl() {
      this.nonSelfRefURLS = true;
    }

    Gurl.prototype.load = function(glog) {
      var _this = this;
      return glog.registerPostArticleHook(function(articles, cb) {
        return _this.processArticles(articles, function(processedArticles) {
          return cb(null, processedArticles);
        });
      });
    };

    Gurl.prototype.processArticles = function(articles, cb) {};

    Gurl.prototype.processArticle = function(article, cb) {
      var _this = this;
      return this.appendAnchorList(article, function(anchors) {
        var iterator;
        iterator = function(href, icb) {
          return href.replace(/(http(s)?:d)?(([^:\s]+)\.(com|net|org))/gi, function(url) {
            return _this.isSelfRefURL(url, function(well) {
              var newhref;
              if (well === false) {
                newhref = String(href);
                newhref = newhref.replace('<a', '<a target="_blank"');
                article = article.replace(href, newhref);
              }
              return icb();
            });
          });
        };
        return async.forEach(anchors, iterator, function(error) {
          return cb(article);
        });
      });
    };

    Gurl.prototype.appendAnchorList = function(article, cb) {
      var anchors,
        _this = this;
      anchors = [];
      article.replace(/(<a href="([^"]+)">([^<]+)<\/a>)/g, function(href) {
        return anchors.push(href);
      });
      return cb(anchors);
    };

    Gurl.prototype.isSelfRefURL = function(url, cb) {
      return fs.readFile(__dirname + '/../config.json', function(error, data) {
        var domain;
        if (error != null) {
          throw error;
        }
        try {
          domain = JSON.parse(data).domain;
          if (domain === urlparse(url).host) {
            return cb(true);
          } else {
            return cb(false);
          }
        } catch (e) {
          throw e;
        }
      });
    };

    return Gurl;

  })();

  module.exports = new Gurl;

}).call(this);
