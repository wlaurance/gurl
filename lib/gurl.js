// Generated by CoffeeScript 1.3.3
(function() {
  var Gurl, async, fs, urlparse,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  try {
    fs = require('fs');
    urlparse = require('urlparse');
    async = require('async');
  } catch (e) {
    console.error(e);
  }

  Gurl = (function() {

    function Gurl() {
      this.processArticle = __bind(this.processArticle, this);
      this.nonSelfRefURLS = true;
      this.articles = [];
    }

    Gurl.prototype.load = function(glog) {
      var _this = this;
      return glog.registerPostArticleHook(function(articles, cb) {
        _this.articles = [];
        return async.forEach(articles, _this.processArticle, function(error) {
          return cb(null, _this.articles);
        });
      });
    };

    Gurl.prototype.processArticle = function(article, cb) {
      var _this = this;
      return this.appendAnchorList(article.body, function(anchors) {
        var iterator;
        iterator = function(href, icb) {
          if (href === void 0) {
            href = '';
          }
          return href.replace(/(http(s)?:d)?(([^:\s]+)\.(\w)+)/g, function(url) {
            return _this.isSelfRefURL(url, function(well) {
              var newhref;
              if (well === false) {
                newhref = String(href);
                newhref = newhref.replace('<a', '<a target="_blank"');
                article.body = article.body.replace(href, newhref);
              }
              return icb();
            });
          });
        };
        if (anchors.length !== 0) {
          return async.forEachSeries(anchors, iterator, function(error) {
            _this.articles.push(article);
            return cb(error);
          });
        } else {
          _this.articles.push(article);
          return cb('');
        }
      });
    };

    Gurl.prototype.appendAnchorList = function(body, cb) {
      var anchors,
        _this = this;
      anchors = [];
      body.replace(/(<a href="([^"]+)">([^<]+)<\/a>)/g, function(href) {
        return anchors.push(href);
      });
      return cb(anchors);
    };

    Gurl.prototype.isSelfRefURL = function(url, cb) {
      return fs.readFile(__dirname + '/../config.json', function(error, data) {
        var domain;
        if (error != null) {
          throw error;
        }
        try {
          domain = JSON.parse(data).domain;
          if (domain === urlparse(url).host) {
            return cb(true);
          } else {
            return cb(false);
          }
        } catch (e) {
          console.log(e);
          throw e;
        }
      });
    };

    return Gurl;

  })();

  module.exports = new Gurl;

}).call(this);
